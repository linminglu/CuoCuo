{"version":3,"sources":["funCsv.js"],"names":["papaparse","require","csv","turnCsvToJson","csvname","callback","toJson","csvData","csvJson","i","length","rowJson","j","trim","cc","loader","loadRes","err","error","message","jsData","parse","complete","parsedCsv","data","getHuoDong","type","fun","utils","getLength","STR_HuoDong","getItem","itemId","parseInt","INT_ItemID","module","exports"],"mappings":";;;;;;AAAA,IAAIA,YAAYC,QAAQ,eAAR,CAAhB;;AAEA,IAAIC,MAAM;;AAENC,mBAAgB,uBAASC,OAAT,EAAkBC,QAAlB,EAA2B;AACvC,YAAIC,SAAS,SAATA,MAAS,CAASC,OAAT,EAAiB;AAC1B,gBAAIC,UAAU,EAAd;AACA,iBAAI,IAAIC,IAAE,CAAV,EAAaA,IAAEF,QAAQG,MAAvB,EAA+B,EAAED,CAAjC,EAAmC;AAC/B,oBAAIE,UAAU,EAAd;AACA,qBAAI,IAAIC,IAAE,CAAV,EAAaA,IAAEL,QAAQ,CAAR,EAAWG,MAA1B,EAAkC,EAAEE,CAApC,EAAsC;AAClCD,4BAAQJ,QAAQ,CAAR,EAAWK,CAAX,EAAcC,IAAd,EAAR,IAAgCN,QAAQE,CAAR,EAAWG,CAAX,CAAhC;AACAJ,4BAAQC,CAAR,IAAaE,OAAb;AACH;AACJ;AACD,mBAAOH,OAAP;AACH,SAVD;AAWAM,WAAGC,MAAH,CAAUC,OAAV,CAAkBZ,OAAlB,EAA2B,UAASa,GAAT,EAAcV,OAAd,EAAsB;AAC7C,gBAAIU,GAAJ,EAAS;AACLH,mBAAGI,KAAH,CAASD,IAAIE,OAAJ,IAAeF,GAAxB;AACA;AACH,aAHD,MAGO;AACH,oBAAIG,SAASpB,UAAUqB,KAAV,CAAgBd,OAAhB,EAAyB;AAClCe,8BAAU,kBAASC,SAAT,EAAmB;AACzBlB,iCAASC,OAAOiB,UAAUC,IAAjB,CAAT;AACH;AAHiC,iBAAzB,CAAb;AAKH;AACJ,SAXD;AAYH,KA1BK;;AA4BNC,gBAAa,oBAASC,IAAT,EAAerB,QAAf,EAAwB;AACjC,aAAKF,aAAL,CAAmB,iBAAnB,EAAsC,UAASK,OAAT,EAAiB;AACnD,iBAAI,IAAIC,IAAE,CAAV,EAAaA,IAAEkB,IAAIC,KAAJ,CAAUC,SAAV,CAAoBrB,OAApB,CAAf,EAA6C,EAAEC,CAA/C,EAAiD;AAC7C,oBAAGD,QAAQC,IAAE,CAAV,EAAaqB,WAAb,KAA6BJ,IAAhC,EAAqC;AACjCrB,6BAASG,QAAQC,IAAE,CAAV,CAAT;AACH;AACJ;AACJ,SAND;AAOH,KApCK;;AAsCNsB,aAAU,iBAASC,MAAT,EAAiB3B,QAAjB,EAA0B;AAChC,aAAKF,aAAL,CAAmB,cAAnB,EAAmC,UAASK,OAAT,EAAiB;AAChD,iBAAI,IAAIC,IAAE,CAAV,EAAaA,IAAEkB,IAAIC,KAAJ,CAAUC,SAAV,CAAoBrB,OAApB,CAAf,EAA6C,EAAEC,CAA/C,EAAiD;AAC7C,oBAAGwB,SAASzB,QAAQC,IAAE,CAAV,EAAayB,UAAtB,MAAsCF,MAAzC,EAAgD;AAC5C3B,6BAASG,QAAQC,IAAE,CAAV,CAAT;AACH;AACJ;AACJ,SAND;AAOH;;AA9CK,CAAV;;AAkDA0B,OAAOC,OAAP,GAAiBlC,GAAjB","file":"funCsv.js","sourceRoot":"../../../../../../assets/hall/script/fun","sourcesContent":["let papaparse = require('papaparse.min');\r\n\r\nlet csv = {\r\n\r\n    turnCsvToJson : function(csvname, callback){\r\n        let toJson = function(csvData){\r\n            let csvJson = {};\r\n            for(let i=1; i<csvData.length; ++i){\r\n                let rowJson = {};\r\n                for(let j=0; j<csvData[0].length; ++j){\r\n                    rowJson[csvData[0][j].trim()] = csvData[i][j];\r\n                    csvJson[i] = rowJson;\r\n                }\r\n            }\r\n            return csvJson;\r\n        }\r\n        cc.loader.loadRes(csvname, function(err, csvData){\r\n            if (err) {\r\n                cc.error(err.message || err);\r\n                return;\r\n            } else {\r\n                let jsData = papaparse.parse(csvData, {\r\n                    complete: function(parsedCsv){\r\n                        callback(toJson(parsedCsv.data));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n\r\n    getHuoDong : function(type, callback){\r\n        this.turnCsvToJson('csv/huodong.csv', function(csvJson){\r\n            for(let i=0; i<fun.utils.getLength(csvJson); ++i){\r\n                if(csvJson[i+1].STR_HuoDong === type){\r\n                    callback(csvJson[i+1]);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    getItem : function(itemId, callback){\r\n        this.turnCsvToJson('csv/item.csv', function(csvJson){\r\n            for(let i=0; i<fun.utils.getLength(csvJson); ++i){\r\n                if(parseInt(csvJson[i+1].INT_ItemID) === itemId){\r\n                    callback(csvJson[i+1]);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nmodule.exports = csv;"]}